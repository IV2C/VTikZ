from openai import OpenAI
from groq import Groq, AsyncGroq
from pydantic import BaseModel, Field
import os
from typing import List
import json
import asyncio


class VarbenchResponse(BaseModel):
    id: str = Field(
        ...,
        description='A representative identifier for the modification (for example "cat_grayed")'
    )
    instruction: str = Field(
        ..., description="An example of instruction that can be applied to the code"
    )
    result_description: str = Field(
        ...,
        description="A description of the result of the instruction applied to the code",
    )


class VarbenchResponses(BaseModel):
    commented_code:str = Field(
        description="The entire code that was given as input with added meaningfull comments that identify the features in the code(i.e. what code is mapped to which visual feature generated)",
    )
    general_description: str = Field(
        ...,
        description="A general description of the image generated by the original code",
    )
    modifications: List[VarbenchResponse] = Field(
        ...,
        description="List of modifications",
    )




